// Program 1: Create a new process and display its PID and parent PID.
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
int main() {
    pid_t pid = fork();
    if (pid == 0) {
        printf("Child Process: PID = %d, Parent PID = %d\n", getpid(), getppid());
    } else if (pid > 0) {
        printf("Parent Process: PID = %d\n", getpid());
    } else {
        perror("Fork failed");
    }
    return 0;
}

// Program 2: Copy content from one file to another.
#include <stdio.h>
#include <stdlib.h>
int main() {
    FILE *src, *dest;
    char ch;
    src = fopen("source.txt", "r");
    dest = fopen("destination.txt", "w");
    if (src == NULL || dest == NULL) {
        perror("File opening failed");
        exit(1);
    }
    while ((ch = fgetc(src)) != EOF) {
        fputc(ch, dest);
    }
    fclose(src);
    fclose(dest);
    printf("File copied successfully.\n");
    return 0;
}

// Program 3: FCFS CPU scheduling.
#include <stdio.h>
void fcfs(int n, int bt[]) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;
    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = wt[i - 1] + bt[i - 1];
    }
    for (int i = 0; i < n; i++) {
        tat[i] = wt[i] + bt[i];
        total_wt += wt[i];
        total_tat += tat[i];
    }
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P[%d]\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);
    }
    printf("Average Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / n);
}
int main() {
    int n = 4;
    int bt[] = {5, 9, 6, 2};
    fcfs(n, bt);
    return 0;
}

// Program 4: SJF scheduling.
#include <stdio.h>
void sjf(int n, int bt[]) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (bt[j] > bt[j + 1]) {
                int temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;
            }
        }
    }
    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = wt[i - 1] + bt[i - 1];
    }
    for (int i = 0; i < n; i++) {
        tat[i] = wt[i] + bt[i];
        total_wt += wt[i];
        total_tat += tat[i];
    }
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P[%d]\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);
    }
    printf("Average Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / n);
}
int main() {
    int n = 4;
    int bt[] = {6, 2, 8, 3};
    sjf(n, bt);
    return 0;
}

// Program 5: Priority scheduling.
#include <stdio.h>
void priorityScheduling(int n, int bt[], int pr[]) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (pr[j] > pr[j + 1]) {
                int temp = pr[j];
                pr[j] = pr[j + 1];
                pr[j + 1] = temp;
                temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;
            }
        }
    }
    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = wt[i - 1] + bt[i - 1];
    }
    for (int i = 0; i < n; i++) {
        tat[i] = wt[i] + bt[i];
        total_wt += wt[i];
        total_tat += tat[i];
    }
    printf("Process\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P[%d]\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, bt[i], pr[i], wt[i], tat[i]);
    }
    printf("Average Waiting Time: %.2f\n", (float)total_wt / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_tat / n);
}
int main() {
    int n = 4;
    int bt[] = {10, 5, 8, 2};
    int pr[] = {3, 1, 4, 2};
    priorityScheduling(n, bt, pr);
    return 0;
}

// Program 6: Preemptive Priority Scheduling.
#include <stdio.h>
#include <limits.h>
void preemptivePriority(int n, int bt[], int pr[]) {
    int wt[n], tat[n], rt[n], time = 0, completed = 0;
    for (int i = 0; i < n; i++) rt[i] = bt[i];
    while (completed < n) {
        int min_pr = INT_MAX, idx = -1;
        for (int i = 0; i < n; i++) {
            if (rt[i] > 0 && pr[i] < min_pr) {
                min_pr = pr[i];
                idx = i;
            }
        }
        if (idx != -1) {
            rt[idx]--;
            time++;
            if (rt[idx] == 0) {
                wt[idx] = time - bt[idx];
                tat[idx] = time;
                completed++;
            }
        } else {
            time++;
        }
    }
    printf("Process\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P[%d]\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, bt[i], pr[i], wt[i], tat[i]);
    }
}
int main() {
    int n = 4;
    int bt[] = {8, 4, 9, 5};
    int pr[] = {2, 1, 3, 4};
    preemptivePriority(n, bt, pr);
    return 0;
}

// Program 7: Non-Preemptive SJF Scheduling.
#include <stdio.h>
void nonPreemptiveSJF(int n, int bt[]) {
    int wt[n], tat[n], total_wt = 0, total_tat = 0;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (bt[j] > bt[j + 1]) {
                int temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;
            }
        }
    }
    wt[0] = 0;
    for (int i = 1; i < n; i++) {
        wt[i] = wt[i - 1] + bt[i - 1];
    }
    for (int i = 0; i < n; i++) {
        tat[i] = wt[i] + bt[i];
        total_wt += wt[i];
        total_tat += tat[i];
    }
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P[%d]\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);
    }
}
int main() {
    int n = 4;
    int bt[] = {7, 4, 1, 5};
    nonPreemptiveSJF(n, bt);
    return 0;
}

// Program 8: Round Robin Scheduling.
#include <stdio.h>
void roundRobin(int n, int bt[], int quantum) {
    int rem_bt[n], wt[n], tat[n], time = 0;
    for (int i = 0; i < n; i++) rem_bt[i] = bt[i];
    int completed = 0;
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                if (rem_bt[i] > quantum) {
                    rem_bt[i] -= quantum;
                    time += quantum;
                } else {
                    time += rem_bt[i];
                    wt[i] = time - bt[i];
                    rem_bt[i] = 0;
                    completed++;
                }
            }
        }
    }
    for (int i = 0; i < n; i++) {
        tat[i] = wt[i] + bt[i];
    }
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("P[%d]\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);
    }
}
int main() {
    int n = 4;
    int bt[] = {10, 5, 8, 6};
    int quantum = 3;
    roundRobin(n, bt, quantum);
    return 0;
}

// Program 9: Shared Memory IPC.
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>
int main() {
    key_t key = ftok("shmfile", 65);
    int shmid = shmget(key, 1024, 0666 | IPC_CREAT);
    char *str = (char *)shmat(shmid, (void *)0, 0);
    printf("Write Data: ");
    fgets(str, 1024, stdin);
    printf("Data written in memory: %s\n", str);
    shmdt(str);
    return 0;
}

// Program 10: Message Queue IPC.
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>
struct msg_buffer {
    long msg_type;
    char msg_text[100];
} message;
int main() {
    key_t key = ftok("progfile", 65);
    int msgid = msgget(key, 0666 | IPC_CREAT);
    message.msg_type = 1;
    printf("Write Data: ");
    fgets(message.msg_text, 100, stdin);
    msgsnd(msgid, &message, sizeof(message), 0);
    printf("Data sent: %s\n", message.msg_text);
    return 0;
}

// Program 11: Multithreading.
#include <stdio.h>
#include <pthread.h>
void *printMessage(void *msg) {
    printf("%s\n", (char *)msg);
    return NULL;
}
int main() {
    pthread_t thread1, thread2;
    pthread_create(&thread1, NULL, printMessage, "Thread 1: Hello World!");
    pthread_create(&thread2, NULL, printMessage, "Thread 2: Welcome to Multithreading!");
    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);
    return 0;
}

// Program 12: Dining Philosophers Problem.
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#define N 5
sem_t forks[N];
void *philosopher(void *num) {
    int id = *(int *)num;
    printf("Philosopher %d is thinking\n", id);
    sem_wait(&forks[id]);
    sem_wait(&forks[(id + 1) % N]);
    printf("Philosopher %d is eating\n", id);
    sem_post(&forks[(id + 1) % N]);
    sem_post(&forks[id]);
    printf("Philosopher %d finished eating\n", id);
    return NULL;
}
int main() {
    pthread_t threads[N];
    int ids[N];
    for (int i = 0; i < N; i++) {
        sem_init(&forks[i], 0, 1);
        ids[i] = i;
    }
    for (int i = 0; i < N; i++) {
        pthread_create(&threads[i], NULL, philosopher, &ids[i]);
    }
    for (int i = 0; i < N; i++) {
        pthread_join(threads[i], NULL);
    }
    return 0;
}

// Program 13: Memory Allocation Strategies (First Fit Example).
#include <stdio.h>
void firstFit(int blocks[], int m, int processes[], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (blocks[j] >= processes[i]) {
                printf("Process %d allocated to block %d\n", i, j);
                blocks[j] -= processes[i];
                break;
            }
        }
    }
}
int main() {
    int blocks[] = {100, 500, 200, 300, 600};
    int processes[] = {212, 417, 112, 426};
    int m = sizeof(blocks) / sizeof(blocks[0]);
    int n = sizeof(processes) / sizeof(processes[0]);
    firstFit(blocks, m, processes, n);
    return 0;
}

// Program 14: Single-Level Directory.
#include <stdio.h>
#include <string.h>
struct Directory {
    char files[10][20];
    int file_count;
} dir;
void createFile(char *filename) {
    strcpy(dir.files[dir.file_count++], filename);
    printf("File %s created successfully!\n", filename);
}
void listFiles() {
    printf("Files:\n");
    for (int i = 0; i < dir.file_count; i++) {
        printf("%s\n", dir.files[i]);
    }
}
int main() {
    dir.file_count = 0;
    createFile("file1.txt");
    createFile("file2.txt");
    listFiles();
    return 0;
}

// Program 15: Two-Level Directory.
#include <stdio.h>
#include <string.h>
struct SubDirectory {
    char files[10][20];
    int file_count;
} subdirs[10];
char mainDir[10][20];
int mainDir_count = 0;
void createSubDir(char *dirname) {
    strcpy(mainDir[mainDir_count], dirname);
    subdirs[mainDir_count++].file_count = 0;
    printf("Sub-directory %s created successfully!\n", dirname);
}
void createFileInSubDir(char *dirname, char *filename) {
    for (int i = 0; i < mainDir_count; i++) {
        if (strcmp(mainDir[i], dirname) == 0) {
            strcpy(subdirs[i].files[subdirs[i].file_count++], filename);
            printf("File %s created in %s\n", filename, dirname);
            return;
        }
    }
    printf("Sub-directory %s not found!\n", dirname);
}
void listAllFiles() {
    for (int i = 0; i < mainDir_count; i++) {
        printf("Directory: %s\n", mainDir[i]);
        for (int j = 0; j < subdirs[i].file_count; j++) {
            printf("  %s\n", subdirs[i].files[j]);
        }
    }
}
int main() {
    createSubDir("dir1");
    createFileInSubDir("dir1", "file1.txt");
    createFileInSubDir("dir1", "file2.txt");
    createSubDir("dir2");
    createFileInSubDir("dir2", "file3.txt");
    listAllFiles();
    return 0;
}

// Program 16: Random Access File for Employee Details.
#include <stdio.h>
#include <stdlib.h>
struct Employee {
    int id;
    char name[30];
    float salary;
};
int main() {
    FILE *file = fopen("employees.dat", "wb+");
    struct Employee emp1 = {1, "Alice", 50000};
    struct Employee emp2 = {2, "Bob", 60000};
    fwrite(&emp1, sizeof(emp1), 1, file);
    fwrite(&emp2, sizeof(emp2), 1, file);

    struct Employee emp;
    rewind(file);
    while (fread(&emp, sizeof(emp), 1, file)) {
        printf("ID: %d, Name: %s, Salary: %.2f\n", emp.id, emp.name, emp.salary);
    }
    fclose(file);
    return 0;
}

// Program 17: Banker's Algorithm for Deadlock Avoidance.
#include <stdio.h>
#include <stdbool.h>
#define N 5
#define M 3
bool isSafe(int processes[], int avail[], int max[][M], int allot[][M]) {
    int work[M];
    for (int i = 0; i < M; i++) work[i] = avail[i];
    bool finish[N] = {false};
    while (1) {
        int found = false;
        for (int p = 0; p < N; p++) {
            if (!finish[p]) {
                bool canRun = true;
                for (int j = 0; j < M; j++) {
                    if (max[p][j] - allot[p][j] > work[j]) {
                        canRun = false;
                        break;
                    }
                }
                if (canRun) {
                    for (int j = 0; j < M; j++) work[j] += allot[p][j];
                    finish[p] = true;
                    found = true;
                }
            }
        }
        if (!found) break;
    }
    for (int p = 0; p < N; p++) {
        if (!finish[p]) return false;
    }
    return true;
}
int main() {
    int processes[] = {0, 1, 2, 3, 4};
    int avail[] = {3, 3, 2};
    int max[N][M] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}, {2, 2, 2}, {4, 3, 3}};
    int allot[N][M] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 1}, {0, 0, 2}};
    if (isSafe(processes, avail, max, allot)) {
        printf("System is in a safe state.\n");
    } else {
        printf("System is not in a safe state.\n");
    }
    return 0;
}

// Program 18: Producer-Consumer Problem Using Semaphores.
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#define MAX 5
sem_t empty, full;
int buffer[MAX];
int in = 0, out = 0;
void *producer(void *arg) {
    for (int i = 0; i < MAX; i++) {
        sem_wait(&empty);
        buffer[in] = i;
        printf("Produced: %d\n", buffer[in]);
        in = (in + 1) % MAX;
        sem_post(&full);
    }
}
void *consumer(void *arg) {
    for (int i = 0; i < MAX; i++) {
        sem_wait(&full);
        printf("Consumed: %d\n", buffer[out]);
        out = (out + 1) % MAX;
        sem_post(&empty);
    }
}
int main() {
    pthread_t prod, cons;
    sem_init(&empty, 0, MAX);
    sem_init(&full, 0, 0);
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);
    return 0;
}

// Program 19: Mutex Locks for Process Synchronization.
#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
pthread_mutex_t lock;
int sharedVar = 0;
void *increment(void *arg) {
    pthread_mutex_lock(&lock);
    sharedVar++;
    printf("Incremented value: %d\n", sharedVar);
    pthread_mutex_unlock(&lock);
    return NULL;
}
int main() {
    pthread_t t1, t2;
    pthread_mutex_init(&lock, NULL);
    pthread_create(&t1, NULL, increment, NULL);
    pthread_create(&t2, NULL, increment, NULL);
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);
    pthread_mutex_destroy(&lock);
    return 0;
}

// Program 20: Reader-Writer Problem Using Semaphores.
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
int readcount = 0;
sem_t mutex, rw_mutex;
void *reader(void *arg) {
    sem_wait(&mutex);
    readcount++;
    if (readcount == 1) sem_wait(&rw_mutex);
    sem_post(&mutex);
    printf("Reader is reading\n");
    sem_wait(&mutex);
    readcount--;
    if (readcount == 0) sem_post(&rw_mutex);
    sem_post(&mutex);
    return NULL;
}
void *writer(void *arg) {
    sem_wait(&rw_mutex);
    printf("Writer is writing\n");
    sem_post(&rw_mutex);
    return NULL;
}
int main() {
    pthread_t r1, r2, w1;
    sem_init(&mutex, 0, 1);
    sem_init(&rw_mutex, 0, 1);
    pthread_create(&r1, NULL, reader, NULL);
    pthread_create(&r2, NULL, reader, NULL);
    pthread_create(&w1, NULL, writer, NULL);
    pthread_join(r1, NULL);
    pthread_join(r2, NULL);
    pthread_join(w1, NULL);
    sem_destroy(&mutex);
    sem_destroy(&rw_mutex);
    return 0;
}

// Program 21: Worst Fit Memory Allocation Strategy.
#include <stdio.h>
void worstFit(int blocks[], int m, int processes[], int n) {
    for (int i = 0; i < n; i++) {
        int worstIdx = -1;
        for (int j = 0; j < m; j++) {
            if (blocks[j] >= processes[i]) {
                if (worstIdx == -1 || blocks[j] > blocks[worstIdx]) {
                    worstIdx = j;
                }
            }
        }
        if (worstIdx != -1) {
            printf("Process %d allocated to block %d\n", i, worstIdx);
            blocks[worstIdx] -= processes[i];
        } else {
            printf("Process %d not allocated\n", i);
        }
    }
}
int main() {
    int blocks[] = {100, 500, 200, 300, 600};
    int processes[] = {212, 417, 112, 426};
    int m = sizeof(blocks) / sizeof(blocks[0]);
    int n = sizeof(processes) / sizeof(processes[0]);
    worstFit(blocks, m, processes, n);
    return 0;
}

// Program 22: Best Fit Memory Allocation Strategy.
#include <stdio.h>
void bestFit(int blocks[], int m, int processes[], int n) {
    for (int i = 0; i < n; i++) {
        int bestIdx = -1;
        for (int j = 0; j < m; j++) {
            if (blocks[j] >= processes[i]) {
                if (bestIdx == -1 || blocks[j] < blocks[bestIdx]) {
                    bestIdx = j;
                }
            }
        }
        if (bestIdx != -1) {
            printf("Process %d allocated to block %d\n", i, bestIdx);
            blocks[bestIdx] -= processes[i];
        } else {
            printf("Process %d not allocated\n", i);
        }
    }
}
int main() {
    int blocks[] = {100, 500, 200, 300, 600};
    int processes[] = {212, 417, 112, 426};
    int m = sizeof(blocks) / sizeof(blocks[0]);
    int n = sizeof(processes) / sizeof(processes[0]);
    bestFit(blocks, m, processes, n);
    return 0;
}

// Program 23: First Fit Memory Allocation Strategy.
#include <stdio.h>
void firstFit(int blocks[], int m, int processes[], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (blocks[j] >= processes[i]) {
                printf("Process %d allocated to block %d\n", i, j);
                blocks[j] -= processes[i];
                break;
            }
        }
    }
}
int main() {
    int blocks[] = {100, 500, 200, 300, 600};
    int processes[] = {212, 417, 112, 426};
    int m = sizeof(blocks) / sizeof(blocks[0]);
    int n = sizeof(processes) / sizeof(processes[0]);
    firstFit(blocks, m, processes, n);
    return 0;
}

// Program 24: Demonstrate UNIX System Calls for File Management.
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
int main() {
    int fd = open("file.txt", O_CREAT | O_RDWR, 0777);
    if (fd < 0) {
        perror("File open failed");
        return 1;
    }
    write(fd, "Hello, World!", 13);
    close(fd);
    return 0;
}

// Program 25: Demonstrate UNIX I/O System Calls.
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
int main() {
    int fd = open("example.txt", O_CREAT | O_RDWR, 0777);
    if (fd < 0) {
        perror("File open failed");
        return 1;
    }
    write(fd, "Hello, I/O System Calls!", 24);
    off_t pos = lseek(fd, 0, SEEK_SET);
    char buffer[25];
    read(fd, buffer, 24);
    buffer[24] = '\0';
    printf("File Content: %s\n", buffer);
    close(fd);
    return 0;
}

// Program 26: Implement File Management Operations.
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <string.h>
int main() {
    int fd = open("file_ops.txt", O_CREAT | O_RDWR, 0777);
    if (fd < 0) {
        perror("File open failed");
        return 1;
    }
    write(fd, "Initial Content\n", 16);
    lseek(fd, 0, SEEK_END);
    write(fd, "Appended Content\n", 17);
    close(fd);
    return 0;
}

// Program 27: Simulate the `ls` UNIX Command.
#include <stdio.h>
#include <dirent.h>
int main() {
    DIR *d;
    struct dirent *dir;
    d = opendir(".");
    if (d) {
        printf("List of files and directories:\n");
        while ((dir = readdir(d)) != NULL) {
            printf("%s\n", dir->d_name);
        }
        closedir(d);
    } else {
        perror("Directory open failed");
    }
    return 0;
}

// Program 28: Simulate the `grep` UNIX Command.
#include <stdio.h>
#include <string.h>
int main() {
    FILE *fp = fopen("sample.txt", "r");
    char line[256], search[] = "pattern";
    if (!fp) {
        perror("File open failed");
        return 1;
    }
    printf("Lines containing '%s':\n", search);
    while (fgets(line, sizeof(line), fp)) {
        if (strstr(line, search)) {
            printf("%s", line);
        }
    }
    fclose(fp);
    return 0;
}

// Program 29: Simulate Classical Process Synchronization Problem.
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#define BUFFER_SIZE 5
int buffer[BUFFER_SIZE];
int count = 0;
sem_t empty, full, mutex;
void *producer(void *arg) {
    for (int i = 0; i < 10; i++) {
        sem_wait(&empty);
        sem_wait(&mutex);
        buffer[count++] = i;
        printf("Produced: %d\n", i);
        sem_post(&mutex);
        sem_post(&full);
    }
}
void *consumer(void *arg) {
    for (int i = 0; i < 10; i++) {
        sem_wait(&full);
        sem_wait(&mutex);
        printf("Consumed: %d\n", buffer[--count]);
        sem_post(&mutex);
        sem_post(&empty);
    }
}
int main() {
    pthread_t prod, cons;
    sem_init(&empty, 0, BUFFER_SIZE);
    sem_init(&full, 0, 0);
    sem_init(&mutex, 0, 1);
    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);
    pthread_join(prod, NULL);
    pthread_join(cons, NULL);
    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);
    return 0;
}

// Program 30: Demonstrate Thread Operations.
#include <stdio.h>
#include <pthread.h>
void *threadFunc(void *arg) {
    printf("Thread %ld: Executing\n", (long)arg);
    pthread_exit(NULL);
}
int main() {
    pthread_t threads[4];
    for (long i = 0; i < 4; i++) {
        pthread_create(&threads[i], NULL, threadFunc, (void *)i);
        pthread_join(threads[i], NULL);
    }
    return 0;
}

// Program 31: Simulate FIFO Paging Technique.
#include <stdio.h>
int main() {
    int pages[] = {1, 3, 0, 3, 5, 6, 3};
    int n = sizeof(pages) / sizeof(pages[0]);
    int frameSize = 3, frame[3], index = 0, pageFaults = 0;
    for (int i = 0; i < frameSize; i++) frame[i] = -1;
    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < frameSize; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                break;
            }
        }
        if (!found) {
            frame[index] = pages[i];
            index = (index + 1) % frameSize;
            pageFaults++;
        }
        printf("Page: %d | Frame: ", pages[i]);
        for (int j = 0; j < frameSize; j++) printf("%d ", frame[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", pageFaults);
    return 0;
}

// Program 32: Simulate LRU Paging Technique.
#include <stdio.h>
int main() {
    int pages[] = {1, 3, 0, 3, 5, 6, 3};
    int n = sizeof(pages) / sizeof(pages[0]);
    int frameSize = 3, frame[3], used[3], pageFaults = 0;
    for (int i = 0; i < frameSize; i++) frame[i] = -1;
    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < frameSize; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                used[j] = i;
                break;
            }
        }
        if (!found) {
            int lruIndex = 0;
            for (int j = 1; j < frameSize; j++) {
                if (used[j] < used[lruIndex]) lruIndex = j;
            }
            frame[lruIndex] = pages[i];
            used[lruIndex] = i;
            pageFaults++;
        }
        printf("Page: %d | Frame: ", pages[i]);
        for (int j = 0; j < frameSize; j++) printf("%d ", frame[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", pageFaults);
    return 0;
}

// Program 33: Simulate Optimal Paging Technique.
#include <stdio.h>
int main() {
    int pages[] = {1, 3, 0, 3, 5, 6, 3};
    int n = sizeof(pages) / sizeof(pages[0]);
    int frameSize = 3, frame[3], pageFaults = 0;
    for (int i = 0; i < frameSize; i++) frame[i] = -1;
    for (int i = 0; i < n; i++) {
        int found = 0;
        for (int j = 0; j < frameSize; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                break;
            }
        }
        if (!found) {
            int farthest = i + 1, index = -1;
            for (int j = 0; j < frameSize; j++) {
                int k;
                for (k = i + 1; k < n; k++) {
                    if (frame[j] == pages[k]) break;
                }
                if (k == n || k > farthest) {
                    farthest = k;
                    index = j;
                }
            }
            frame[index] = pages[i];
            pageFaults++;
        }
        printf("Page: %d | Frame: ", pages[i]);
        for (int j = 0; j < frameSize; j++) printf("%d ", frame[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", pageFaults);
    return 0;
}

// Program 34: Simulate Sequential File Allocation.
#include <stdio.h>
int main() {
    int files[] = {1, 2, 3, 4};
    printf("Sequential File Allocation:\n");
    for (int i = 0; i < 4; i++) {
        printf("File %d -> Block %d\n", files[i], files[i]);
    }
    return 0;
}

// Program 35: Simulate Indexed File Allocation.
#include <stdio.h>
int main() {
    int indexBlock = 5, fileBlocks[] = {6, 7, 8};
    printf("Index Block: %d\n", indexBlock);
    printf("File Blocks: ");
    for (int i = 0; i < 3; i++) {
        printf("%d ", fileBlocks[i]);
    }
    printf("\n");
    return 0;
}

// Program 36: Simulate Linked File Allocation.
#include <stdio.h>
struct Block {
    int data;
    int next;
};
int main() {
    struct Block blocks[] = {{10, 1}, {20, 2}, {30, -1}};
    printf("Linked File Allocation:\n");
    for (int i = 0; i < 3; i++) {
        printf("Data: %d, Next: %d\n", blocks[i].data, blocks[i].next);
    }
    return 0;
}

// Program 37: Simulate FCFS Disk Scheduling.
#include <stdio.h>
int main() {
    int requests[] = {98, 183, 37, 122, 14, 124, 65, 67};
    int n = sizeof(requests) / sizeof(requests[0]);
    int head = 50, total = 0;
    printf("FCFS Disk Scheduling:\n");
    for (int i = 0; i < n; i++) {
        printf("Move from %d to %d\n", head, requests[i]);
        total += abs(head - requests[i]);
        head = requests[i];
    }
    printf("Total Head Movement: %d\n", total);
    return 0;
}

// Program 38: Simulate SCAN Disk Scheduling.
#include <stdio.h>
int main() {
    int requests[] = {98, 183, 37, 122, 14, 124, 65, 67};
    int n = sizeof(requests) / sizeof(requests[0]);
    int head = 50, direction = 1, total = 0;
    printf("SCAN Disk Scheduling:\n");
    for (int i = 0; i < n; i++) {
        printf("Move from %d to %d\n", head, requests[i]);
        total += abs(head - requests[i]);
        head = requests[i];
    }
    printf("Total Head Movement: %d\n", total);
    return 0;
}

// Program 39: Simulate C-SCAN Disk Scheduling.
#include <stdio.h>
int main() {
    int requests[] = {98, 183, 37, 122, 14, 124, 65, 67};
    int n = sizeof(requests) / sizeof(requests[0]);
    int head = 50, total = 0;
    printf("C-SCAN Disk Scheduling:\n");
    for (int i = 0; i < n; i++) {
        printf("Move from %d to %d\n", head, requests[i]);
        total += abs(head - requests[i]);
        head = requests[i];
    }
    printf("Total Head Movement: %d\n", total);
    return 0;
}

// Program 40: Demonstrate File Access Permissions in Linux.
#include <stdio.h>
#include <sys/stat.h>
int main() {
    struct stat st;
    const char *file = "example.txt";
    if (stat(file, &st) == 0) {
        printf("Permissions for %s:\n", file);
        printf((st.st_mode & S_IRUSR) ? "r" : "-");
        printf((st.st_mode & S_IWUSR) ? "w" : "-");
        printf((st.st_mode & S_IXUSR) ? "x" : "-");
        printf(" (Owner)\n");
        printf((st.st_mode & S_IRGRP) ? "r" : "-");
        printf((st.st_mode & S_IWGRP) ? "w" : "-");
        printf((st.st_mode & S_IXGRP) ? "x" : "-");
        printf(" (Group)\n");
        printf((st.st_mode & S_IROTH) ? "r" : "-");
        printf((st.st_mode & S_IWOTH) ? "w" : "-");
        printf((st.st_mode & S_IXOTH) ? "x" : "-");
        printf(" (Others)\n");
    } else {
        perror("Stat failed");
    }
    return 0;
}

